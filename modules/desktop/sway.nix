{ options, config, lib, pkgs, ... }:

with lib;
with lib.my;
let
  cfg = config.modules.desktop.sway;
  configDir = config.dotfiles.configDir;
  primaryMonitor = findFirst (x: x.primary) {} cfg.monitors;
in
{
  options.modules.desktop.sway = with types; {
    enable = mkBoolOpt false;
    mako.settings = mkOpt attrs {};
    monitors = mkOpt (listOf (submodule {
      options = {
        output = mkOpt str "";
        mode = mkOpt str "preferred";
        position = mkOpt str "auto";
        scale = mkOpt int 1;
        disable = mkOpt bool false;
        primary = mkOpt bool false;
      };
    })) [{}];
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      pulseaudio # for volume control
      foot
      bemenu
      waybar
      wdisplays
      hyprpicker
      mako

      # TODO: parametrize into conf/pkgs
      swayidle
      grim
      slurp
    ];

    # # Enable the gnome-keyring secrets vault.
    # # Will be exposed through DBus to programs willing to store secrets.
    # services.gnome.gnome-keyring.enable = true;

    services = {
      gvfs.enable = true;
    };

    # enable Sway window manager
    programs.sway = {
      enable = true;
      wrapperFeatures.gtk = true;
    };

    xdg.portal = {
      enable = true;
      wlr.enable = true;
      # gtk portal needed to make gtk apps happy
      extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
    };

    environment.sessionVariables = {
      ELECTRON_OZONE_PLATFORM_HINT = "auto";
      NIXOS_OZONE_WL = "1";
      MOZ_ENABLE_WAYLAND = "1";
      # SDL_VIDEODRIVER=wayland
      # QT_QPA_PLATFORM=wayland
      # QT_WAYLAND_DISABLE_WINDOWDECORATION="1"
      # _JAVA_AWT_WM_NONREPARENTING=1
    };

    # configuring sway itself (assmung a display manager starts it)
    systemd.user.targets.sway-session = {
      description = "Sway compositor session";
      documentation = [ "man:systemd.special(7)" ];
      bindsTo = [ "graphical-session.target" ];
      wants = [ "graphical-session-pre.target" ];
      after = [ "graphical-session-pre.target" ];
    };

     services.greetd = {
        enable = true;
        vt = 2;  # Avoid vt log messages conflict with tuigreet pseudo gui
        settings = rec {
          default_session = {
            command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --remember --cmd 'dbus-run-session sway --unsupported-gpu'";
            user = "greeter";
          };
        };
      };

     home.configFile = {
      "foot/foot.ini".text = ''
        font=Terminus (TTF):size=16

        [colors]
        background=0e1415
        foreground=cecece
      '';

      "mako/config".text =
        let toINI = mapAttrsToList (n: v: "${n}=${toString v}");
        in ''
          # config/mako/config -*- mode: ini -*-
          # This was automatically generated by NixOS and my dotfiles
          ${concatStringsSep "\n"
            (toINI ({ "output" = (primaryMonitor.output or ""); }
                    // (filterAttrs (_: v: ! isAttrs v) cfg.mako.settings)))}

          ${concatStringsSep "\n"
            (mapAttrsToList
              (n: v: ''
                [${n}]
                ${concatStringsSep "\n" (toINI v)}
              '')
              (filterAttrs (_: v: isAttrs v) cfg.mako.settings))}

          [mode=dnd]
          invisible=1
        '';
    };

    home.configFile."waybar/config".source = "${configDir}/waybar/config";
    home.configFile."sway/config".source = "${configDir}/sway/config";

    # Enable brightness and volume
    user.extraGroups = [ "video" ];
    programs.light.enable = true;
  };
}