{ options, config, lib, pkgs, ... }:

with lib;
with lib.my;
let
  cfg = config.modules.desktop.sway;
  configDir = config.dotfiles.configDir;
  primaryMonitor = findFirst (x: x.primary) {} cfg.monitors;
in
{
  options.modules.desktop.sway = with types; {
    enable = mkBoolOpt false;
    mako.settings = mkOpt attrs {};
    monitors = mkOpt (listOf (submodule {
      options = {
        output = mkOpt str "";
        mode = mkOpt str "preferred";
        position = mkOpt str "auto";
        scale = mkOpt int 1;
        disable = mkOpt bool false;
        primary = mkOpt bool false;
      };
    })) [{}];
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      pulseaudio # for volume control
      foot
      bemenu
      waybar
      wdisplays
      hyprpicker
      mako

      # TODO: parametrize into conf/pkgs
      swayidle
      grim
      slurp
    ];

    # # Enable the gnome-keyring secrets vault.
    # # Will be exposed through DBus to programs willing to store secrets.
    # services.gnome.gnome-keyring.enable = true;

    services = {
      gvfs.enable = true;
    };

    environment.sessionVariables = {
        # SDL:
        SDL_VIDEODRIVER = "wayland";
        # QT (needs qt5.qtwayland in systemPackages):
        QT_QPA_PLATFORM = "wayland-egl";
        QT_WAYLAND_DISABLE_WINDOWDECORATION = "1";
        # # Fix for some Java AWT applications (e.g. Android Studio),
        # # use this if they aren't displayed properly:
        # _JAVA_AWT_WM_NONREPARENTING = "1";

        ELECTRON_OZONE_PLATFORM_HINT = "auto";
        NIXOS_OZONE_WL = "1";
        MOZ_ENABLE_WAYLAND = "1";
        XDG_CURRENT_DESKTOP = "sway";
        XDG_SESSION_TYPE = "wayland";
    };

    # enable Sway window manager
    programs.sway = {
      enable = true;
      wrapperFeatures.gtk = true;
      extraOptions = [
        "--unsupported-gpu"
      ];
      extraSessionCommands = ''
      '';
    };

    xdg.portal = {
      enable = true;
      wlr.enable = true;
      xdgOpenUsePortal = true;
      # wlr.settings = {
      #   screencast = {
      #     output_name = "DP-1";
      #     max_fps = 30;
      #     chooser_type = "simple";
      #     chooser_cmd = "${pkgs.slurp}/bin/slurp -f %o -or";
      #   };
      # };
      # config = {
      #   common = {
      #     default = [ "wlr" ];
      #   };
      # };
      config = {
        common = {
          default = [ "gtk" ];
        };
        sway = {
          default = [ "gtk" ];
          "org.freedesktop.impl.portal.Screencast" = [ "wlr" ];
          "org.freedesktop.impl.portal.Screenshot" = [ "wlr" ];
        };
      };
      extraPortals = with pkgs; [
        # xdg-desktop-portal-wlr
        xdg-desktop-portal-gtk
      ];
    };

    # xdg.portal = {
    #   enable = true;
    #   wlr.enable = true;
    #   wlr.settings = {
    #
    #   }
    #   # xdgOpenUsePortal = true;
    #   # gtk portal needed to make gtk apps happy
    #   extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
    #   config = {
    #     common = {
    #       default = [
    #         "gtk"
    #       ];
    #     };
    #   };
    # };

    # configuring sway itself (assmung a display manager starts it)
    systemd.user.targets.sway-session = {
      description = "Sway compositor session";
      documentation = [ "man:systemd.special(7)" ];
      bindsTo = [ "graphical-session.target" ];
      wants = [ "graphical-session-pre.target" ];
      after = [ "graphical-session-pre.target" ];
    };

     services.greetd = {
        enable = true;
        vt = 2;  # Avoid vt log messages conflict with tuigreet pseudo gui
        settings = rec {
          default_session = {
            command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --remember --cmd 'dbus-run-session sway '";
            user = "greeter";
          };
        };
      };

     home.configFile = {
      "mako/config".text =
        let toINI = mapAttrsToList (n: v: "${n}=${toString v}");
        in ''
          # config/mako/config -*- mode: ini -*-
          # This was automatically generated by NixOS and my dotfiles
          ${concatStringsSep "\n"
            (toINI ({ "output" = (primaryMonitor.output or ""); }
                    // (filterAttrs (_: v: ! isAttrs v) cfg.mako.settings)))}

          ${concatStringsSep "\n"
            (mapAttrsToList
              (n: v: ''
                [${n}]
                ${concatStringsSep "\n" (toINI v)}
              '')
              (filterAttrs (_: v: isAttrs v) cfg.mako.settings))}

          [mode=dnd]
          invisible=1
        '';
    };

    home.configFile."waybar/config".source = "${configDir}/waybar/config";
    home.configFile."sway/config".source = "${configDir}/sway/config";

    # Enable brightness and volume
    user.extraGroups = [ "video" ];
    programs.light.enable = true;
  };
}