{ options, inputs, config, lib, pkgs, ... }:

with lib;
with lib.my;
let
  cfg = config.modules.desktop.hyprland;
  configDir = config.dotfiles.configDir;
  primaryMonitor = findFirst (x: x.primary) {} cfg.monitors;
in
{
  options.modules.desktop.hyprland = with types; {
    enable = mkBoolOpt false;
    mako.settings = mkOpt attrs {};
    monitors = mkOpt (listOf (submodule {
      options = {
        output = mkOpt str "";
        mode = mkOpt str "preferred";
        position = mkOpt str "auto";
        scale = mkOpt int 1;
        disable = mkOpt bool false;
        primary = mkOpt bool false;
      };
    })) [{}];
  };

  config = mkIf cfg.enable {
    modules.desktop.type = "wayland";

    # Retrieve the latest versions.
    nixpkgs.overlays = [
      # Avoiding the hyprland input overlays to avoid cachix misses (and not
      # setting programs.hyprland.package because other packages, like
      # pkgs.hyprshade, may reference pkgs.hyprland in their derivations).
      (prev: final: {
        hyprland = inputs.hyprland.packages.${final.system}.hyprland;
        hyprshot = pkgs.unstable.hyprshot;
      })
    ];

    environment.sessionVariables = {
      ELECTRON_OZONE_PLATFORM_HINT = "auto";
      NIXOS_OZONE_WL = "1";
      MOZ_ENABLE_WAYLAND = "1";
    };

    environment.systemPackages = with pkgs; [
      # pkgs.unstable doesn't have nixpkgs.overlays applied, so any package
      # referencing hyprland in their derivation must be installed from pkgs.
      hyprpicker     # screen-space color picker
      hyprshade      # to apply shaders to the screen
      hyprshot       # instead of grim(shot) or maim/slurp
      waybar         # NEXT: remove when move waybar into module
      hypridle
    ] ++ (with pkgs.unstable; [
      mako           # dunst for wayland
      swaybg         # feh (as a wallpaper manager)
      swaylock

      ## Utilities
      gromit-mpx     # for drawing on the screen
      pamixer        # for volume control
      wf-recorder    # screencasting
      wlr-randr      # for monitors that hyprctl can't handle
      xorg.xrandr    # for XWayland windows
    ]);

    # # Enable the gnome-keyring secrets vault.
    # # Will be exposed through DBus to programs willing to store secrets.
    # services.gnome.gnome-keyring.enable = true;

    services.gvfs.enable = true;

    # TODO: move into own module
    services.hypridle.enable = true;
    services.hypridle.package = pkgs.unstable.hypridle;

    # enable hyprland window manager
    programs.hyprland = {
      enable = true;
      xwayland.enable = true;
      portalPackage = pkgs.xdg-desktop-portal-wlr;
    };

    # xdg.portal = {
    #   enable = true;
    #   wlr.enable = true;
    #   xdgOpenUsePortal = true;
    #   config = {
    #     common = {
    #       default = [ "gtk" ];
    #     };
    #     hyperland = {
    #       default = [ "gtk" ];
    #       "org.freedesktop.impl.portal.Screencast" = [ "wlr" ];
    #       "org.freedesktop.impl.portal.Screenshot" = [ "wlr" ];
    #     };
    #   };
    #   extraPortals = with pkgs; [
    #     xdg-desktop-portal-gtk
    #   ];
    # };

    # # Place in hyperland conf
    # # exec-once = systemctl --user restart hyprland-session.target
    systemd.user.targets.hyprland-session = {
      unitConfig = {
        Description = "Hyprland compositor session";
        Documentation = [ "man:systemd.special(7)" ];
        BindsTo = [ "graphical-session.target" ];
        Wants = [ "graphical-session-pre.target" ];
        After = [ "graphical-session-pre.target" ];
      };
    };

    services.greetd = {
        enable = true;
        vt = 2;  # Avoid vt log messages conflict with tuigreet pseudo gui
        settings = rec {
          default_session = {
            command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --remember --cmd 'dbus-run-session Hyprland'";
            user = "greeter";
          };
        };
    };
    environment.etc."greetd/environments".text = "Hyprland";

     # NEXT: move into own module
     home.configFile = {
      "mako/config".text =
        let toINI = mapAttrsToList (n: v: "${n}=${toString v}");
        in ''
          # config/mako/config -*- mode: ini -*-
          # This was automatically generated by NixOS and my dotfiles
          ${concatStringsSep "\n"
            (toINI ({ "output" = (primaryMonitor.output or ""); }
                    // (filterAttrs (_: v: ! isAttrs v) cfg.mako.settings)))}

          ${concatStringsSep "\n"
            (mapAttrsToList
              (n: v: ''
                [${n}]
                ${concatStringsSep "\n" (toINI v)}
              '')
              (filterAttrs (_: v: isAttrs v) cfg.mako.settings))}

          [mode=dnd]
          invisible=1
        '';
    };

    # NEXT: move into own module
    home.configFile."waybar/config".source = "${configDir}/waybar/config";

    home.configFile."hypr" = {
      recursive = true;
      source = "${configDir}/hypr";
    };

    # Enable brightness and volume
    user.extraGroups = [ "video" ];
    programs.light.enable = true;
  };
}