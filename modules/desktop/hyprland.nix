{ options, inputs, config, lib, pkgs, ... }:

with lib;
with lib.my;
let
  cfg = config.modules.desktop.hyprland;
  configDir = config.dotfiles.configDir;
  primaryMonitor = findFirst (x: x.primary) {} cfg.monitors;
in
{
  options.modules.desktop.hyprland = with types; {
    enable = mkBoolOpt false;
    mako.settings = mkOpt attrs {};
    monitors = mkOpt (listOf (submodule {
      options = {
        output = mkOpt str "";
        mode = mkOpt str "preferred";
        position = mkOpt str "auto";
        scale = mkOpt str "1";
        disable = mkOpt bool false;
        primary = mkOpt bool false;
      };
    })) [{}];
  };

  config = mkIf cfg.enable {
    modules.desktop.type = "wayland";

    environment.sessionVariables = {
      ELECTRON_OZONE_PLATFORM_HINT = "auto";
      NIXOS_OZONE_WL = "1";
      MOZ_ENABLE_WAYLAND = "1";
    };

    environment.systemPackages = with pkgs; [
      hyprpicker     # screen-space color picker
      hyprshade      # to apply shaders to the screen
      hyprshot       # instead of grim(shot) or maim/slurp
      waybar         # status bar

      mako           # dunst for wayland
      swaybg         # feh (as a wallpaper manager)
      swaylock

      ## Utilities
      gromit-mpx     # for drawing on the screen
      pamixer        # for volume control
      wf-recorder    # screencasting
      wlr-randr      # for monitors that hyprctl can't handle
      xorg.xrandr    # for XWayland windows
      copyq           # clipboard manager
    ];

    services.gvfs.enable = true;

    # Enable hyprland window manager and related services/programs
    programs.hyprland = {
      enable = true;
      xwayland.enable = true;
      portalPackage = pkgs.xdg-desktop-portal-wlr;
      withUWSM = true;
    };

    # Promt root password in GUI programs
    security.polkit.enable = true;
    systemd.user.services.polkit-gnome-authentication-agent-1 = {
      description = "polkit-gnome-authentication-agent-1";
      bindsTo = [ "graphical-session.target" ];
      after = [ "graphical-session.target" ];
      wantedBy = [ "graphical-session.target" ];
      serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
        Restart = "on-failure";
        RestartSec = 1;
        TimeoutStopSec = 10;
      };
    };

    ## Bootloader.
    # I don't use a real login screen. Instead, I activate hyprlock immediately
    # after boot for basic authentication, with a specialized config to make the
    # boot up process smoother. This is enough to stop casual snoopers from
    # getting into my desktops.
    services.greetd = {
      enable = true;
      settings.default_session = {
        command = "${lib.getExe config.programs.uwsm.package} start hyprland-uwsm.desktop";
        user = config.user.name;
      };
    };
    environment.etc."greetd/environments".text = "Hyprland";

    # NEXT: move into own module
    home.configFile = {
      "swaylock/config".text = ''
        indicator-caps-lock
        image=$XDG_DATA_HOME/wallpaper
        scaling=fill
        font=monospace term
        font-size=25
      '';
      "mako/config".text =
        let toINI = mapAttrsToList (n: v: "${n}=${toString v}");
        in ''
          # config/mako/config -*- mode: ini -*-
          # This was automatically generated by NixOS and my dotfiles
          ${concatStringsSep "\n"
            (toINI ({ "output" = (primaryMonitor.output or ""); }
                    // (filterAttrs (_: v: ! isAttrs v) cfg.mako.settings)))}

          ${concatStringsSep "\n"
            (mapAttrsToList
              (n: v: ''
                [${n}]
                ${concatStringsSep "\n" (toINI v)}
              '')
              (filterAttrs (_: v: isAttrs v) cfg.mako.settings))}

          [mode=dnd]
          invisible=1

          [app-name=Slack]
          default-timeout=0
          ignore-timeout=true
        '';
    };

    home.configFile."waybar/config".source = "${configDir}/waybar/config";
    home.configFile."hypr/hyprland.pre.conf".text = ''
        # config/hypr/hyprland.pre.conf
        # This was automatically generated by NixOS and my dotfiles

        # Bootstrap session
        exec-once = ~/.config/hypr/startup

        ${concatStringsSep "\n" (map
          (v: if v.disable
              then "monitor = ${v.output},disable"
              else "monitor = ${v.output},${v.mode},${v.position},${v.scale}")
          cfg.monitors)}

        $PRIMARY_MONITOR = ${primaryMonitor.output or ""}
        ${optionalString (primaryMonitor ? output) ''
          cursor {
            default_monitor = $PRIMARY_MONITOR
          }

          # Since wayland doesn't have the concept of a primary monitor,
          # XWayland windows may start in unpredictbale places without a hint.
          exec-once = xrandr --output $PRIMARY_MONITOR --primary
        ''}
    '';
    home.configFile."hypr/hyprland.conf".source = "${configDir}/hypr/hyprland.conf";
    home.configFile."hypr/startup".source = "${configDir}/hypr/startup";

    services.hypridle.enable = true;
    home.configFile."hypr/hypridle.conf".text = ''
      general {
          lock_cmd = ${getExe' pkgs.procps "pidof"} swaylock || ${getExe pkgs.swaylock} -f # avoid starting multiple swaylock instances.
          before_sleep_cmd = ${getExe pkgs.swaylock} -f    # lock before suspend.
          after_sleep_cmd = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms on  # to avoid having to press a key twice to turn on the display.
      }

      listener {
          timeout = 7200
          on-timeout = ${getExe pkgs.swaylock} -f      # lock screen when timeout has passed
      }

      listener {
          timeout = 10800
          on-timeout = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms off  # screen off when timeout has passed
          on-resume = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms on    # screen on when activity is detected after timeout has fired.}
      }
    '';

    # Enable brightness and volume
    user.extraGroups = [ "video" ];
    programs.light.enable = true;
  };
}