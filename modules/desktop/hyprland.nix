{ options, inputs, config, lib, pkgs, ... }:

with lib;
with lib.my;
let
  cfg = config.modules.desktop.hyprland;
  configDir = config.dotfiles.configDir;
  primaryMonitor = findFirst (x: x.primary) {} cfg.monitors;
in
{
  options.modules.desktop.hyprland = with types; {
    enable = mkBoolOpt false;
    mako.settings = mkOpt attrs {};
    monitors = mkOpt (listOf (submodule {
      options = {
        output = mkOpt str "";
        mode = mkOpt str "preferred";
        position = mkOpt str "auto";
        scale = mkOpt int 1;
        disable = mkOpt bool false;
        primary = mkOpt bool false;
      };
    })) [{}];
  };

  config = mkIf cfg.enable {
    modules.desktop.type = "wayland";

    environment.sessionVariables = {
      ELECTRON_OZONE_PLATFORM_HINT = "auto";
      NIXOS_OZONE_WL = "1";
      MOZ_ENABLE_WAYLAND = "1";
    };

    environment.systemPackages = with pkgs; [
      hyprpicker     # screen-space color picker
      hyprshade      # to apply shaders to the screen
      hyprshot       # instead of grim(shot) or maim/slurp
      hypridle

      waybar         # status bar
      mako           # dunst for wayland
      swaybg         # feh (as a wallpaper manager)
      swaylock

      ## Utilities
      gromit-mpx     # for drawing on the screen
      pamixer        # for volume control
      wf-recorder    # screencasting
      wlr-randr      # for monitors that hyprctl can't handle
      xorg.xrandr    # for XWayland windows
    ];

    # # Enable the gnome-keyring secrets vault.
    # # Will be exposed through DBus to programs willing to store secrets.
    # services.gnome.gnome-keyring.enable = true;

    services.gvfs.enable = true;


    # Enable hyprland window manager and related services/programs
    programs.hyprland = {
      enable = true;
      xwayland.enable = true;
      portalPackage = pkgs.xdg-desktop-portal-wlr;
      package = pkgs.unstable.hyprland;
    };
    services.hypridle.enable = true;

    xdg.portal = {
      enable = true;
      xdgOpenUsePortal = true;
    #   wlr.enable = true;
    #   config = {
    #     common = {
    #       default = [ "gtk" ];
    #     };
    #     hyperland = {
    #       default = [ "gtk" ];
    #       "org.freedesktop.impl.portal.Screencast" = [ "wlr" ];
    #       "org.freedesktop.impl.portal.Screenshot" = [ "wlr" ];
    #     };
    #   };
    # extraPortals = with pkgs; [
    #   xdg-desktop-portal-gtk
    #   xdg-desktop-portal-kde
    # ];
    };

    # # Place in hyperland conf
    # # exec-once = systemctl --user restart hyprland-session.target
    systemd.user.targets.hyprland-session = {
      unitConfig = {
        Description = "Hyprland compositor session";
        Documentation = [ "man:systemd.special(7)" ];
        BindsTo = [ "graphical-session.target" ];
        Wants = [ "graphical-session-pre.target" ];
        After = [ "graphical-session-pre.target" ];
      };
    };

    services.greetd = {
        enable = true;
        vt = 2;  # Avoid vt log messages conflict with tuigreet pseudo gui
        settings = {
          default_session = {
            command = toString (pkgs.writeShellScript "hyprland-wrapper" ''
              trap 'systemctl --user stop hyprland-session.target; sleep 1' EXIT
              ${pkgs.greetd.tuigreet}/bin/tuigreet --time --remember --cmd 'dbus-run-session Hyprland'
            '');
            user = config.user.name;
          };
        };
    };
    environment.etc."greetd/environments".text = "Hyprland";

     # NEXT: move into own module
     home.configFile = {
      "mako/config".text =
        let toINI = mapAttrsToList (n: v: "${n}=${toString v}");
        in ''
          # config/mako/config -*- mode: ini -*-
          # This was automatically generated by NixOS and my dotfiles
          ${concatStringsSep "\n"
            (toINI ({ "output" = (primaryMonitor.output or ""); }
                    // (filterAttrs (_: v: ! isAttrs v) cfg.mako.settings)))}

          ${concatStringsSep "\n"
            (mapAttrsToList
              (n: v: ''
                [${n}]
                ${concatStringsSep "\n" (toINI v)}
              '')
              (filterAttrs (_: v: isAttrs v) cfg.mako.settings))}

          [mode=dnd]
          invisible=1

          [app-name=Slack]
          default-timeout=0
          ignore-timeout=true
        '';
    };

    # NEXT: move into own module
    home.configFile."waybar/config".source = "${configDir}/waybar/config";

    home.configFile."hypr/hyprland.conf".source = "${configDir}/hypr/hyprland.conf";

    home.configFile."hypr/hypridle.conf".text = ''
      general {
          lock_cmd = ${getExe' pkgs.procps "pidof"} swaylock || ${getExe pkgs.swaylock} -f -c 0E1415 # avoid starting multiple swaylock instances.
          before_sleep_cmd = ${getExe pkgs.swaylock} -f -c 0E1415    # lock before suspend.
          after_sleep_cmd = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms on  # to avoid having to press a key twice to turn on the display.
      }

      listener {
          timeout = 2000
          on-timeout = ${getExe pkgs.swaylock} -f -c 0E1415      # lock screen when timeout has passed
      }

      listener {
          timeout = 4600
          on-timeout = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms off  # screen off when timeout has passed
          on-resume = ${getExe' pkgs.hyprland "hyprctl"} dispatch dpms on    # screen on when activity is detected after timeout has fired.}
      }
    '';

    # Enable brightness and volume
    user.extraGroups = [ "video" ];
    programs.light.enable = true;
  };
}